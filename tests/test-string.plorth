"./framework" import

"length"
[
  ( "" length nip 0 = ),
  ( "foo" length nip 3 = ),
]
test-case

"chars"
[
  ( "" chars nip [] = ),
  ( "foo" chars nip ["f", "o", "o"] = ),
]
test-case

"runes"
[
  ( "" runes nip [] = ),
  ( "foo" runes nip [102, 111, 111] = ),
]
test-case

"words"
[
  ( "" words nip length nip 0 = ),
  ( "foo" words nip length nip 1 = ),
  ( "foo\tbar" words nip length nip 2 = ),
  ( "foo\r\n \tbar" words nip length nip 2 = ),
]
test-case

"lines"
[
  ( "foo" lines nip length 1 = nip ),
  ( "foo\nbar" lines nip length 2 = nip ),
  ( "foo\r\nbar" lines nip length 2 = nip ),
  ( "foo\rbar" lines nip length 2 = nip ),
]
test-case

"includes?"
[
  ( "foo" "foobar" includes? nip ),
  ( "bar" "foobar" includes? nip ),
  ( "baz" "foobar" includes? not nip ),
  ( "" "foobar" includes? nip ),
  ( "foobar" "foo" includes? not nip ),
]
test-case

"index-of"
[
  ( "foo" "foobar" index-of nip 0 = ),
  ( "bar" "foobar" index-of nip 3 = ),
  ( "baz" "foobar" index-of nip null? nip ),
  ( "" "foobar" index-of nip 0 = ),
  ( "foobar" "foo" index-of nip null? nip ),
]
test-case

"last-index-of"
[
  ( "foo" "foofoobar" last-index-of nip 3 = ),
  ( "bar" "foobar" last-index-of nip 3 = ),
  ( "baz" "foobar" last-index-of nip null? nip ),
  ( "" "foobar" last-index-of nip 6 = ),
  ( "foobar" "foo" last-index-of nip null? nip ),
]
test-case

"starts-with?"
[
  ( "foo" "foobar" starts-with? nip ),
  ( "bar" "foobar" starts-with? nip not ),
  ( "" "foobar" starts-with? nip ),
  ( "foobar" "foo" starts-with? nip not ),
]
test-case

"ends-with?"
[
  ( "bar" "foobar" ends-with? nip ),
  ( "foo" "foobar" ends-with? nip not ),
  ( "" "foobar" ends-with? nip ),
  ( "foobar" "foo" ends-with? nip not ),
]
test-case

"space?"
[
  ( "" space? not nip ),
  ( " \t\r\n " space? nip ),
  ( " foo\t" space? not nip ),
]
test-case

"lower-case?"
[
  ( "foo" lower-case? nip ),
  ( "FOO" lower-case? not nip ),
]
test-case

"upper-case?"
[
  ( "FOO" upper-case? nip ),
  ( "foo" upper-case? not nip ),
]
test-case

"reverse"
[
  ( "foo" reverse "oof" = ),
]
test-case

"upper-case"
[
  ( "foo" upper-case "FOO" = ),
  ( "FOO" upper-case "FOO" = ),
]
test-case

"lower-case"
[
  ( "FOO" lower-case "foo" = ),
  ( "foo" lower-case "foo" = ),
]
test-case

"swap-case"
[
  ( "fooBAR" swap-case "FOObar" = ),
]
test-case

"capitalize"
[
  ( "foo" capitalize "Foo" = ),
  ( "FOO" capitalize "Foo" = ),
]
test-case

"trim"
[
  ( " foo " trim "foo" = ),
  ( "foo" dup trim = ),
]
test-case

"trim-left"
[
  ( " foo" trim-left "foo" = ),
  ( "foo " dup trim-left = ),
]
test-case

"trim-right"
[
  ( "foo " trim-right "foo" = ),
  ( " foo" dup trim-right = ),
]
test-case

"+"
[
  ( "foo" "bar" + "foobar" = ),
  ( "foo" "" + "foo" = ),
  ( "" "bar" + "bar" = ),
  ( "" dup dup + = ),
]
test-case

"*"
[
  ( 2 "foo" * "foofoo" = ),
  ( 0 "foo" * "" = ),
]
test-case

"@"
[
  ( 0 "foo" @ "f" = nip ),
  ( -1 "foo" @ "o" = nip ),
  ( ( 0 "" @ ) ( drop true ) ( false ) try-else nip ),
]
test-case

">symbol"
[
  ( "foo" >symbol symbol? nip ),
  ( ( "" >symbol ) ( drop true ) ( false ) try-else ),
  ( ( "  " >symbol ) ( drop true ) ( false ) try-else ),
  ( ( ":foo" >symbol ) ( drop true ) ( false ) try-else ),
  ( ( "(foo)" >symbol ) ( drop true ) ( false ) try-else ),
]
test-case
