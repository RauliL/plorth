#!/usr/bin/env plorth

"../runtime/test" import

"string prototype"
(
  "length"
  (
    ( "" length nip 0 = ) assert
    ( "foo" length nip 3 = ) assert
  ) it

  "chars"
  (
    ( "" chars nip [] = ) assert
    ( "foo" chars nip ["f", "o", "o"] = ) assert
  ) it

  "runes"
  (
    ( "" runes nip [] = ) assert
    ( "foo" runes nip [102, 111, 111] = ) assert
  ) it

  "words"
  (
    ( "" words nip length nip 0 = ) assert
    ( "foo" words nip length nip 1 = ) assert
    ( "foo\tbar" words nip length nip 2 = ) assert
    ( "foo\r\n \tbar" words nip length nip 2 = ) assert
  ) it

  "lines"
  (
    ( "foo" lines nip length 1 = nip ) assert
    ( "foo\nbar" lines nip length 2 = nip ) assert
    ( "foo\r\nbar" lines nip length 2 = nip ) assert
    ( "foo\rbar" lines nip length 2 = nip ) assert
  ) it

  "includes?"
  (
    ( "foo" "foobar" includes? nip  ) assert
    ( "bar" "foobar" includes? nip  ) assert
    ( "baz" "foobar" includes? not nip  ) assert
    ( "" "foobar" includes? nip  ) assert
    ( "foobar" "foo" includes? not nip  ) assert
  ) it

  "index-of"
  (
    ( "foo" "foobar" index-of nip 0 =  ) assert
    ( "bar" "foobar" index-of nip 3 =  ) assert
    ( "baz" "foobar" index-of nip null? nip  ) assert
    ( "" "foobar" index-of nip 0 =  ) assert
    ( "foobar" "foo" index-of nip null? nip  ) assert
  ) it

  "last-index-of"
  (
    ( "foo" "foofoobar" last-index-of nip 3 =  ) assert
    ( "bar" "foobar" last-index-of nip 3 =  ) assert
    ( "baz" "foobar" last-index-of nip null? nip  ) assert
    ( "" "foobar" last-index-of nip 6 =  ) assert
    ( "foobar" "foo" last-index-of nip null? nip  ) assert
  ) it

  "starts-with?"
  (
    ( "foo" "foobar" starts-with? nip  ) assert
    ( "bar" "foobar" starts-with? nip not  ) assert
    ( "" "foobar" starts-with? nip  ) assert
    ( "foobar" "foo" starts-with? nip not  ) assert
  ) it

  "ends-with?"
  (
    ( "bar" "foobar" ends-with? nip  ) assert
    ( "foo" "foobar" ends-with? nip not  ) assert
    ( "" "foobar" ends-with? nip  ) assert
    ( "foobar" "foo" ends-with? nip not  ) assert
  ) it

  "space?"
  (
    ( "" space? not nip  ) assert
    ( " \t\r\n " space? nip  ) assert
    ( " foo\t" space? not nip  ) assert
  ) it

  "lower-case?"
  (
    ( "foo" lower-case? nip  ) assert
    ( "FOO" lower-case? not nip  ) assert
  ) it

  "upper-case?"
  (
    ( "FOO" upper-case? nip  ) assert
    ( "foo" upper-case? not nip  ) assert
  ) it

  "reverse"
  (
    ( "foo" reverse "oof" =  ) assert
  ) it

  "upper-case"
  (
    ( "foo" upper-case "FOO" =  ) assert
    ( "FOO" upper-case "FOO" =  ) assert
  ) it

  "lower-case"
  (
    ( "FOO" lower-case "foo" =  ) assert
    ( "foo" lower-case "foo" =  ) assert
  ) it

  "swap-case"
  (
    ( "fooBAR" swap-case "FOObar" =  ) assert
  ) it

  "capitalize"
  (
    ( "foo" capitalize "Foo" =  ) assert
    ( "FOO" capitalize "Foo" =  ) assert
  ) it

  "trim"
  (
    ( " foo " trim "foo" =  ) assert
    ( "foo" dup trim =  ) assert
  ) it

  "trim-left"
  (
    ( " foo" trim-left "foo" =  ) assert
    ( "foo " dup trim-left =  ) assert
  ) it

  "trim-right"
  (
    ( "foo " trim-right "foo" =  ) assert
    ( " foo" dup trim-right =  ) assert
  ) it

  "+"
  (
    ( "foo" "bar" + "foobar" =  ) assert
    ( "foo" "" + "foo" =  ) assert
    ( "" "bar" + "bar" =  ) assert
    ( "" dup dup + =  ) assert
  ) it

  "*"
  (
    ( 2 "foo" * "foofoo" =  ) assert
    ( 0 "foo" * "" =  ) assert
  ) it

  "@"
  (
    ( 0 "foo" @ "f" = nip  ) assert
    ( -1 "foo" @ "o" = nip  ) assert
    ( ( 0 "" @ ) ( drop true ) ( false ) try-else nip  ) assert
  ) it

  ">symbol"
  (
    ( "foo" >symbol symbol? nip  ) assert
    ( ( "" >symbol ) ( drop true ) ( false ) try-else  ) assert
    ( ( "  " >symbol ) ( drop true ) ( false ) try-else  ) assert
    ( ( ":foo" >symbol ) ( drop true ) ( false ) try-else  ) assert
    ( ( "(foo)" >symbol ) ( drop true ) ( false ) try-else  ) assert
  ) it
) describe

"string literals"
(
  "empty"
  (
    ( "" length 0 = ) assert
  ) it

  "non-empty"
  (
    ( "foo" length 3 = ) assert
  ) it

  "escape sequences"
  (
    ( extract runes nip = assert )
    {
      "\b": 8,
      "\t": 9,
      "\n": 10,
      "\f": 12,
      "\r": 13,
      "\"": 34,
      "\'": 39,
      "\\": 92,
      "\/": 47,
      "\u0048": 72,
      "\u00e4": 228,
    }
    entries nip for-each
  ) it

  "invalid escape sequences"
  (
    ( ( compile ) ( drop true ) ( false ) try-else )
    [
      "'\\x'",
      "'\\u00'",
      "'\\uxxxx'",
    ]
    for-each
  ) it
) describe
