#!/usr/bin/env plorth

"../runtime/test" import

"object prototype"
(
  "keys"
  (
    ( {} keys [] = nip ) assert
    ( { "a": 1 } keys ["a"] = nip ) assert
  ) it

  "values"
  (
    ( {} values [] = nip ) assert
    ( { "a": 1 } values [1] = nip ) assert
  ) it

  "entries"
  (
    ( {} entries [] = nip ) assert
    ( { "a": 1 } entries [["a", 1]] = nip ) assert
  ) it

  "has?"
  (
    ( "a" {} has? not nip ) assert
    ( "keys" {} has? nip ) assert
    ( "a" { "a": 1 } has? nip ) assert
  ) it

  "has-own?"
  (
    ( "a" {} has-own? not nip ) assert
    ( "keys" {} has-own? not nip ) assert
    ( "a" { "a": 1 } has-own? nip ) assert
  ) it

  "new"
  (
    ( ( {} new ) ( drop true ) ( false ) try-else ) assert
    ( ( { "prototype": {} } new ) ( false ) ( drop true ) try-else ) assert
    ( { "prototype": { "a": 1 } } new "a" swap has? nip ) assert
    (
      { "prototype": { "constructor": ( 1 "a" rot ! ) } } new "a" swap has? nip
    ) assert
  ) it

  "@"
  (
    ( "a" { "a": 1 } @ 1 = nip ) assert
    ( ( "a" {} @ ) ( 2drop true ) ( false ) try-else ) assert
  ) it

  "!"
  (
    ( "a" 2 "a" { "a": 1 } ! @ 2 = nip ) assert
    ( 1 "a" {} ! { "a": 1 } = ) assert
  ) it

  "delete"
  (
    ( "a" { "a": 1 } delete {} = ) assert
    ( ( "a" {} delete ) ( drop true ) ( false ) try-else nip ) assert
  ) it

  "+"
  (
    ( { "a": 1 } {} + keys length 1 = nip nip ) assert
    ( "a" { "a": 1 } { "a": 2 } + @ 2 = nip ) assert
    ( { "a": 1 } { "b": 2 } + { "a": 1, "b": 2 } = ) assert
  ) it
) describe

"object literals"
(
  "empty"
  (
    ( {} object? swap keys nip length nip 0 = and ) assert
  ) it

  "non-empty"
  (
    ( { "a": 1, "b": true, "c": [1, 2, 3] } object? nip ) assert
    ( "a" { "a": 1 } has-own? nip ) assert
  ) it
) describe
