#!/usr/bin/env plorth

"../runtime/test" import

"array prototype"
(
  "length"
  (
    ( [] length nip 0 = ) assert
    ( [1, 2, 3] length nip 3 = ) assert
  ) it

  "push"
  (
    ( 1 [] push [1] = ) assert
    ( 3 [1, 2] push [1, 2, 3] = ) assert
  ) it

  "pop"
  (
    ( [1, 2] pop 2 = swap [1] = and ) assert
    ( ( [] pop ) ( 2drop true ) ( false ) try-else ) assert
  ) it

  "includes?"
  (
    ( 2 [1, 2, 3] includes? nip ) assert
    ( 4 [1, 2, 3] includes? not nip ) assert
  ) it

  "index-of"
  (
    ( 2 [1, 2, 3] index-of nip 1 = ) assert
    ( 4 [1, 2, 3] index-of nip null = ) assert
  ) it

  "find"
  (
    ( ( 2 > ) [1, 2, 3] find nip 3 = ) assert
    ( ( 3 > ) [1, 2, 3] find nip null = ) assert
  ) it

  "find-index"
  (
    ( ( 2 > ) [1, 2, 3] find-index nip 2 = ) assert
    ( ( 3 > ) [1, 2, 3] find-index nip null = ) assert
  ) it

  "every?"
  (
    ( ( number? nip ) [1, 2, 3] every? nip ) assert
    ( ( number? nip ) [1, "foo", 3] every? nip not ) assert
  ) it

  "some?"
  (
    ( ( number? nip ) ["foo", "bar", 1] some? nip ) assert
    ( ( number? nip ) ["foo", "bar"] some? nip not ) assert
  ) it

  "reverse"
  (
    ( [1, 2, 3] reverse [3, 2, 1] = ) assert
  ) it

  "uniq"
  (
    ( [1, 1, 2, 2, 3, 3] uniq [1, 2, 3] = ) assert
  ) it

  "extract"
  (
    ( ["test"] extract "test" = ) assert
  ) it

  "join"
  (
    ( ", " ["foo", "bar"] join "foo, bar" = ) assert
  ) it

  "for-each"
  (
    ( (drop true) [1] for-each ) assert
  ) it

  "2for-each"
  (
    ( (2drop true) [1] [2] 2for-each ) assert
    ( {} (rot !) [1, 2] ["foo", "bar"] 2for-each { "foo": 1, "bar": 2 } = )
      assert
  ) it

  "map"
  (
    ( ( 1 + ) [1, 2, 3] map [2, 3, 4] = ) assert
  ) it

  "2map"
  (
    ( (-) [1, 2, 3] [3, 2, 1, 0] 2map [-2, 0, 2] = ) assert
    ( (swap [] push push) [1, 2, 3] [4, 5, 6] 2map [[1, 4], [2, 5], [3, 6]] = )
      assert
  ) it

  "filter"
  (
    ( ( 1 > ) [1, 2, 3] filter [2, 3] = ) assert
    ( ( 3 > ) [1, 2, 3] filter [] = ) assert
  ) it

  "reduce"
  (
    ( ( + ) [1, 2, 3] reduce 6 = ) assert
  ) it

  ">quote"
  (
    ( [ true ] >quote call ) assert
  ) it

  "+"
  (
    ( [1] [2] + [1, 2] = ) assert
    ( [] [] + length nip 0 = ) assert
    ( [1] [] + length nip 1 = ) assert
  ) it

  "*"
  (
    ( 2 [1, 2] * [1, 2, 1, 2] = ) assert
    ( 1 [] * length nip 0 = ) assert
    ( 0 [1, 2, 3] * length nip 0 = ) assert
  ) it

  "&"
  (
    ( [1, 1, 2, 3, 4] [1, 4, 4] & [1, 4] = ) assert
  ) it

  "|"
  (
    ( [1, 1, 2, 2] [2, 2, 3, 3, 4] | [1, 2, 3, 4] = ) assert
  ) it

  "@"
  (
    ( 0 [1, 2, 3] @ nip 1 = ) assert
    ( -1 [1, 2, 3] @ nip 3 = ) assert
    ( -2 [1, 2, 3] @ nip 2 = ) assert
    ( 2 [1, 2, 3] @ nip 3 = ) assert
    ( ( 0 [] @ ) ( drop true ) ( false ) try-else nip ) assert
  ) it

  "!"
  (
    ( "foo" 0 [1, 2, 3] ! ["foo", 2, 3] = ) assert
    ( "foo" -1 [1, 2, 3] ! [1, 2, "foo"] = ) assert
    ( "foo" -2 [1, 2, 3] ! [1, "foo", 3] = ) assert
    ( "foo" 2 [1, 2, 3] ! [1, 2, "foo"] = ) assert
    ( "foo" 0 [] ! ["foo"] = ) assert
  ) it
) describe
