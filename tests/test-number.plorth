#!/usr/bin/env plorth

"../runtime/test" import

"number prototype"
(
  "/"
  (
    ( 15 3 / 5 = ) assert
    ( 1 3 / 0.33 > ) assert
    ( 1 3 / 0.34 < ) assert
  ) it

  "%"
  (
    ( 21 7 % 0 = ) assert
    ( 17 13 % 4 = ) assert
    ( 3.5 0.25 % 0 = ) assert
    ( 3.25 0.5 % 0.25 = ) assert
    ( 5 3 % 2 = ) assert
    ( -5 3 % 1 = ) assert
    ( 5 -3 % -1 = ) assert
    ( -5 -3 % -2 = ) assert
  ) it

  "&"
  (
    ( 12 10 & 8 = ) assert
  ) it

  "|"
  (
    ( 12 10 | 14 = ) assert
    ( 1 0 ( over | swap 1 << swap ) 64 times -1 = nip ) assert
  ) it

  "^"
  (
    ( 12 10 ^ 6 = ) assert
  ) it

  "<<"
  (
    ( 12 10 << 12288 = ) assert
  ) it

  ">>"
  (
    ( 12 1 >> 6 = ) assert
  ) it

  "~"
  (
    ( 12 ~ -13 = ) assert
    ( pi ~ ~ 3 = ) assert
  ) it
) describe

"number literals"
(
  "exponential notation"
  (
    ( 100000000000000000000 0 > ) assert
    ( 1000000000000000000e2 1e20 = ) assert
    ( 1e1 10 = ) assert
    ( 4e+2 400 = ) assert
    ( 5e-1 0.5 = ) assert
    ( 1 25e-2 / 4 = ) assert
    ( 1.5e1 15 = ) assert
    ( 1.25e2 125 = ) assert
    ( -1.234E-5 -1 > ) assert
    ( 1e20 >source compile call +1e+20 = ) assert
    ( 1e1000 1 > ) assert
    ( 1e-1000 1 < ) assert
    ( ( 1e ) ( nop ) try error? nip ) assert
    ( ( 1e+ ) ( nop ) try error? nip ) assert
    ( ( 1e-- ) ( nop ) try error? nip ) assert
    ( ( 1e1.1 ) ( nop ) try error? nip ) assert
    ( 10000000000 dup * 1e19 > ) assert
    ( 8000000000000000000 dup + 1e19 > ) assert
    ( -8000000000000000000 dup 0 swap - - -1e19 < ) assert
  ) it

  "precision"
  (
    ( 1000000000000000000 1 + 1000000000000000001 = ) assert
    ( 1000000000000000000 1 - 999999999999999999 = ) assert
    ( 1000000001 1000000003 * 1000000004000000003 = ) assert
  ) it
) describe
