"./framework" import

"infinity"
[
  ( 1 0 / >source compile call inf = ),
  ( -1 0 / >source compile call -inf = ),
  ( inf finite? not ),
  ( -inf finite? not),
]
test-case

"nan"
[
  ( 0 0 / >source compile call dup != ),
  ( nan nan? ),
]
test-case

"division"
[
  ( 15 3 / 5 = ),
  ( 1 3 / 0.33 > ),
  ( 1 3 / 0.34 < ),
]
test-case

"modulo"
[
  ( 21 7 % 0 = ),
  ( 17 13 % 4 = ),
  ( 3.5 0.25 % 0 = ),
  ( 3.25 0.5 % 0.25 = ),
  # ( -3 2 % 1 = ),  # => -1, fails compared to Python's convention.
]
test-case

"exponential-notation"
[
  ( 100000000000000000000 0 > ),
  ( 1000000000000000000e2 1e20 = ),
  ( 1e1 10 = ),
  ( 4e+2 400 = ),
  ( 5e-1 0.5 = ),
  ( 1 25e-2 / 4 = ),
  ( 1.5e1 15 = ),
  ( 1.25e2 125 = ),
  ( -1.234E-5 -1 > ),
  ( 1e20 >source compile call +1e+20 = ),
  ( 1e1000 1 > ),
  ( 1e-1000 1 < ),
  ( ( 1e ) ( nop ) try error? nip ),
  ( ( 1e+ ) ( nop ) try error? nip ),
  ( ( 1e-- ) ( nop ) try error? nip ),
  ( ( 1e1.1 ) ( nop ) try error? nip ),
  ( 10000000000 dup * 1e19 > ),
  ( 8000000000000000000 dup + 1e19 > ),
  ( -8000000000000000000 dup 0 swap - - -1e19 < ),
]
test-case
