{
    "docs": [
        {
            "location": "/",
            "text": "Plorth\n\n\nPlorth a is stack based, concatenative, strongly typed functional scripting\nlanguage which is easy to embed in applications written in C++. It's inspired\nby \nForth\n and \nFactor\n programming languages.\n\n\nYou can try Plorth online here.\n\n\nThis documentation is still a work in progress.",
            "title": "Home"
        },
        {
            "location": "/#plorth",
            "text": "Plorth a is stack based, concatenative, strongly typed functional scripting\nlanguage which is easy to embed in applications written in C++. It's inspired\nby  Forth  and  Factor  programming languages.  You can try Plorth online here.  This documentation is still a work in progress.",
            "title": "Plorth"
        },
        {
            "location": "/installation/",
            "text": "Installing Plorth\n\n\nThis page describes how to get Plorth up and running on your computer.\n\n\nPlorth has no dependencies, only \nCMake\n and C++11 capable compiler are\nrequired to compile the interpreter.\n\n\nRetrieving the source code\n\n\nYour best bet of getting your hands on Plorth interpreter source code is to\nclone it from \nGitHub\n. This can be done\nby executing the following command:\n\n\n$ git clone https://github.com/RauliL/plorth.git\n\n\n\n\nCompiling\n\n\nAfter you have cloned the source code from GitHub, you need to compile the\ninterpreter. For this you need modern C++ compiler and \nCMake\n. Change into\n\nplorth\n directory and run following commands:\n\n\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n\n\n\n\nThis will begin compilation of the interpreter. The interpreter consists of\ntwo parts: Plorth interpreter library and it's command line user interface\nknown as \nplorth-cli\n which uses the interpreter library. By tweaking the CMake\noptions, it's also possible to compile only the library without \nplorth-cli\n\nexecutable, if you plan to embed the interpreter to your own C++ application.\n\n\nInstallation\n\n\nAfter the interpreter has been compiled, you can run the \nplorth-cli\n executable\nlocated in \nbuild\n directory. Alternatively, you can also install Plorth into\nyour system by running the following command:\n\n\nsudo make install\n\n\n\n\nThe installation however is not necessary if you plan only to play with the\ninterpreter's REPL and possibly run some examples.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installing-plorth",
            "text": "This page describes how to get Plorth up and running on your computer.  Plorth has no dependencies, only  CMake  and C++11 capable compiler are\nrequired to compile the interpreter.",
            "title": "Installing Plorth"
        },
        {
            "location": "/installation/#retrieving-the-source-code",
            "text": "Your best bet of getting your hands on Plorth interpreter source code is to\nclone it from  GitHub . This can be done\nby executing the following command:  $ git clone https://github.com/RauliL/plorth.git",
            "title": "Retrieving the source code"
        },
        {
            "location": "/installation/#compiling",
            "text": "After you have cloned the source code from GitHub, you need to compile the\ninterpreter. For this you need modern C++ compiler and  CMake . Change into plorth  directory and run following commands:  $ mkdir build\n$ cd build\n$ cmake ..\n$ make  This will begin compilation of the interpreter. The interpreter consists of\ntwo parts: Plorth interpreter library and it's command line user interface\nknown as  plorth-cli  which uses the interpreter library. By tweaking the CMake\noptions, it's also possible to compile only the library without  plorth-cli \nexecutable, if you plan to embed the interpreter to your own C++ application.",
            "title": "Compiling"
        },
        {
            "location": "/installation/#installation",
            "text": "After the interpreter has been compiled, you can run the  plorth-cli  executable\nlocated in  build  directory. Alternatively, you can also install Plorth into\nyour system by running the following command:  sudo make install  The installation however is not necessary if you plan only to play with the\ninterpreter's REPL and possibly run some examples.",
            "title": "Installation"
        },
        {
            "location": "/language/",
            "text": "Language reference\n\n\nThis page gives a short summary of the Plorth programming language.\n\n\nInterpreter\n\n\nTODO\n\n\nStack\n\n\nTODO\n\n\nWords and dictionaries\n\n\nWhen the interpreter encounters a whitespace separated word, such as \nfoo\n, it\nwill execute the matching piece of code found in the dictionary with that same\nword as the identifier.\n\n\nWhen a word is being executed, the code to be executed is searched\nthrough the following four steps, in this specific order:\n\n\n\n\n\n\nValue specific words: If the stack is not empty, the word specific to the\n   top-most value of the stack will be searched first. This is done through\n   the prototype chain which will be described below. Most of the operations\n   performed on values are usually value specific, meaning that the same word\n   can execute different operations based on the top-most value of the stack.\n\n\n\n\n\n\nLocal dictionary: TODO\n\n\n\n\n\n\nGlobal dictionary: The Plorth interpreter has a global dictionary of words that\n   will also be searched. This dictionary contains the most basic operations in\n   the Plorth programming language.\n\n\n\n\n\n\nNumber: If the word can be converted into a decimal number, it will be converted\n   into a double precision floating point number and placed on the top of the stack.\n\n\n\n\n\n\nIf none of these steps apply, a reference error will be thrown.\n\n\nPrototypes\n\n\nEach value except null have some kind of prototype object, where value specific words\nwill be searched from. Prototype objects might inherit from other prototype\nobjects, creating an inheritance chain, which will be traversed when value\nspecific words are being searched.\n\n\nPrototype of the top-most value on the stack can be extracted with\n\nprototype\n word found in global dictionary. On objects, it can also be found\nas property identified \n__proto__\n. Objects which do not have \n__proto__\n\nproperty will use the global \nobject\n as prototype instead.\n\n\nNew object instances can be created from objects that have \nprototype\n\nproperty with global word \nnew\n. Value of this property will be placed into\n\n__proto__\n property of the newly instantiated object. For example, if we would\nhave this object as the top-most value on our stack\n\n\n{ \"prototype\": { \"foo\": \"bar\" } }\n\n\n\n\nwe could create an instance of the object with \nnew\n word. After \nnew\n has been\ncalled, an instance of the object will be placed as the top-most value of the\nstack. This new object will have a property called \nfoo\n available, the value of which\nwill be a string containing text \n\"bar\"\n.\n\n\nData types\n\n\nNull\n\n\nNull values represent an empty value or no value at all. It is usually\nreturned by words to indicate that nothing was found/accomplished by the word.\nYou can push null values into the stack with the \nnull\n word found in global\ndictionary.\n\n\nBoolean\n\n\nBoolean values represent truthness. They can be placed onto the stack with\nwords \ntrue\n and \nfalse\n which can be found in the global dictionary.\n\n\nNumber\n\n\nTODO\n\n\nString\n\n\nString is a container for textual data, a sequence of Unicode code points.\n\n\nTODO\n\n\nArray\n\n\nArrays are indexed sequences of other values. Arrays can be constructed with\n\narray literals\n, which use same syntax as is used for arrays in JSON. For\nexample, if you would like to construct an array containing numbers from 0 to\n5 and push that onto the stack, you would write:\n\n\n[0, 1, 2, 3, 4, 5]\n\n\n\n\nAfter that, the array is available as the top-most item of the stack.\n\n\nLength of an array can be retrieved with the \nlength\n word. This places the number\nof elements in the array on top of the stack, while leaving the array itself\nintact.\n\n\n[1, 2, 3] length # -> [1, 2, 3] 3\n\n\n\n\nItems from the array can be accessed with the \n@\n word. You need to place the numeric\nindex of the item you wish to retrieve and the array itself onto the stack and finally execute\nthe word. If the index is out of bounds a range error will be thrown.\n\n\n1 [1, 2, 3] @ # -> [1, 2, 3] 2\n\n\n\n\nObject\n\n\nObjects are associative arrays that map string keys into values.\n\n\nTODO: Information about object literals and how to access properties.\n\n\nQuote\n\n\nQuote is a piece of code that can be executed when required. Quotes can be\nconstructed in many different ways, including \nquote literals\n which are words\nplaced inside parenthesis:\n\n\n( foo bar baz )\n\n\n\n\nThis places a quote with words \nfoo\n, \nbar\n and \nbaz\n onto the stack. When you\nexecute the word \ncall\n on the quote, those three words will be executed in\nsequence. Quotes are pretty much like what other languages would call\nfunctions, except that they do not take any arguments but rather operate\ndirectly on the stack.\n\n\nQuotes can also be constructed dynamically with the \ncompile\n keyword. It takes\nsource code in the form of a string, compiles it into a quote and places the compiled\nquote onto the stack. Quotes can also be constructed from other quotes by\ncurrying, composing and negation.\n\n\nQuotes can usually be converted back into source code with the \n>source\n word,\nwith the exception being native core words that are built into the interpreter.\n\n\nError\n\n\nErrors are special values that will be \nthrown\n when some kind of errorneous\nsituation is encountered. Unless errors are being \ncaught\n and processed\nin some way, the execution of the program will be terminated.\n\n\nErrors contain numeric error code and optional textual description of the\nproblem. Unlike in other languages, it is not possible to construct new types\nof errors.\n\n\nDeclaring new words\n\n\nTODO\n\n\nConditional execution\n\n\nTODO\n\n\nCatching errors\n\n\nTODO\n\n\nModules\n\n\nTODO",
            "title": "Language reference"
        },
        {
            "location": "/language/#language-reference",
            "text": "This page gives a short summary of the Plorth programming language.",
            "title": "Language reference"
        },
        {
            "location": "/language/#interpreter",
            "text": "TODO",
            "title": "Interpreter"
        },
        {
            "location": "/language/#stack",
            "text": "TODO",
            "title": "Stack"
        },
        {
            "location": "/language/#words-and-dictionaries",
            "text": "When the interpreter encounters a whitespace separated word, such as  foo , it\nwill execute the matching piece of code found in the dictionary with that same\nword as the identifier.  When a word is being executed, the code to be executed is searched\nthrough the following four steps, in this specific order:    Value specific words: If the stack is not empty, the word specific to the\n   top-most value of the stack will be searched first. This is done through\n   the prototype chain which will be described below. Most of the operations\n   performed on values are usually value specific, meaning that the same word\n   can execute different operations based on the top-most value of the stack.    Local dictionary: TODO    Global dictionary: The Plorth interpreter has a global dictionary of words that\n   will also be searched. This dictionary contains the most basic operations in\n   the Plorth programming language.    Number: If the word can be converted into a decimal number, it will be converted\n   into a double precision floating point number and placed on the top of the stack.    If none of these steps apply, a reference error will be thrown.",
            "title": "Words and dictionaries"
        },
        {
            "location": "/language/#prototypes",
            "text": "Each value except null have some kind of prototype object, where value specific words\nwill be searched from. Prototype objects might inherit from other prototype\nobjects, creating an inheritance chain, which will be traversed when value\nspecific words are being searched.  Prototype of the top-most value on the stack can be extracted with prototype  word found in global dictionary. On objects, it can also be found\nas property identified  __proto__ . Objects which do not have  __proto__ \nproperty will use the global  object  as prototype instead.  New object instances can be created from objects that have  prototype \nproperty with global word  new . Value of this property will be placed into __proto__  property of the newly instantiated object. For example, if we would\nhave this object as the top-most value on our stack  { \"prototype\": { \"foo\": \"bar\" } }  we could create an instance of the object with  new  word. After  new  has been\ncalled, an instance of the object will be placed as the top-most value of the\nstack. This new object will have a property called  foo  available, the value of which\nwill be a string containing text  \"bar\" .",
            "title": "Prototypes"
        },
        {
            "location": "/language/#data-types",
            "text": "",
            "title": "Data types"
        },
        {
            "location": "/language/#null",
            "text": "Null values represent an empty value or no value at all. It is usually\nreturned by words to indicate that nothing was found/accomplished by the word.\nYou can push null values into the stack with the  null  word found in global\ndictionary.",
            "title": "Null"
        },
        {
            "location": "/language/#boolean",
            "text": "Boolean values represent truthness. They can be placed onto the stack with\nwords  true  and  false  which can be found in the global dictionary.",
            "title": "Boolean"
        },
        {
            "location": "/language/#number",
            "text": "TODO",
            "title": "Number"
        },
        {
            "location": "/language/#string",
            "text": "String is a container for textual data, a sequence of Unicode code points.  TODO",
            "title": "String"
        },
        {
            "location": "/language/#array",
            "text": "Arrays are indexed sequences of other values. Arrays can be constructed with array literals , which use same syntax as is used for arrays in JSON. For\nexample, if you would like to construct an array containing numbers from 0 to\n5 and push that onto the stack, you would write:  [0, 1, 2, 3, 4, 5]  After that, the array is available as the top-most item of the stack.  Length of an array can be retrieved with the  length  word. This places the number\nof elements in the array on top of the stack, while leaving the array itself\nintact.  [1, 2, 3] length # -> [1, 2, 3] 3  Items from the array can be accessed with the  @  word. You need to place the numeric\nindex of the item you wish to retrieve and the array itself onto the stack and finally execute\nthe word. If the index is out of bounds a range error will be thrown.  1 [1, 2, 3] @ # -> [1, 2, 3] 2",
            "title": "Array"
        },
        {
            "location": "/language/#object",
            "text": "Objects are associative arrays that map string keys into values.  TODO: Information about object literals and how to access properties.",
            "title": "Object"
        },
        {
            "location": "/language/#quote",
            "text": "Quote is a piece of code that can be executed when required. Quotes can be\nconstructed in many different ways, including  quote literals  which are words\nplaced inside parenthesis:  ( foo bar baz )  This places a quote with words  foo ,  bar  and  baz  onto the stack. When you\nexecute the word  call  on the quote, those three words will be executed in\nsequence. Quotes are pretty much like what other languages would call\nfunctions, except that they do not take any arguments but rather operate\ndirectly on the stack.  Quotes can also be constructed dynamically with the  compile  keyword. It takes\nsource code in the form of a string, compiles it into a quote and places the compiled\nquote onto the stack. Quotes can also be constructed from other quotes by\ncurrying, composing and negation.  Quotes can usually be converted back into source code with the  >source  word,\nwith the exception being native core words that are built into the interpreter.",
            "title": "Quote"
        },
        {
            "location": "/language/#error",
            "text": "Errors are special values that will be  thrown  when some kind of errorneous\nsituation is encountered. Unless errors are being  caught  and processed\nin some way, the execution of the program will be terminated.  Errors contain numeric error code and optional textual description of the\nproblem. Unlike in other languages, it is not possible to construct new types\nof errors.",
            "title": "Error"
        },
        {
            "location": "/language/#declaring-new-words",
            "text": "TODO",
            "title": "Declaring new words"
        },
        {
            "location": "/language/#conditional-execution",
            "text": "TODO",
            "title": "Conditional execution"
        },
        {
            "location": "/language/#catching-errors",
            "text": "TODO",
            "title": "Catching errors"
        },
        {
            "location": "/language/#modules",
            "text": "TODO",
            "title": "Modules"
        },
        {
            "location": "/api/",
            "text": "API reference\n\n\n\n\n\nGlobal dictionary\n\n\n\n\n!=\n\n\n\n  \nTakes:\n\n  \nany, any\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nTests whether the two topmost values of the stack are not equal.\n\n\n\n\n-inf\n\n\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPushes the value of negative infinity onto stack.\n\n\n\n\n2drop\n\n\n\n  \nTakes:\n\n  \nany, any\n\n\n\n\n\nDiscards the two topmost values from the stack.\n\n\n1 2 3 2drop #=> 1\n\n\n\n\n\n2dup\n\n\n\n  \nTakes:\n\n  \nany, any\n\n  \nGives:\n\n  \nany, any, any, any\n\n\n\n\n\nDuplicates two topmost values of the stack.\n\n\n1 2 2dup #=> 1 2 1 2\n\n\n\n\n\n=\n\n\n\n  \nTakes:\n\n  \nany, any\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nTests whether the two topmost values of the stack are equal.\n\n\n\n\n>boolean\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nConverts the topmost value of the stack into a boolean. Null and false\nwill become false while everything else will become true.\n\n\n\n\n>source\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nConverts the topmost value of the stack into a string that most accurately\nrepresents what the value would look like in source code.\n\n\n\n\n>string\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nConverts the topmost value of the stack into a string. Null will become\nan empty string.\n\n\n\n\nargs\n\n\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nReturns command line arguments given to the interpreter as an array of\nstrings.\n\n\n\n\narray?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is an array.\n\n\n\n\nboolean?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is a boolean.\n\n\n\n\nclear\n\n\nClears the entire stack of current context.\n\n\n\n\ncompile\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nquote\n\n\n\n\n\nCompiles given string of source code into a quote.\n\n\n\n\nconst\n\n\n\n  \nTakes:\n\n  \nany, string\n\n\n\n\n\nDeclares given value as constant in the current context with name\nidentified by given string.\n\n\n\n\ndepth\n\n\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPushes current depth of the stack onto stack.\n\n\n\n\ndrop\n\n\n\n  \nTakes:\n\n  \nany\n\n\n\n\n\nDiscards topmost value from the stack.\n\n\n1 drop #=> empty stack\n\n\n\n\n\ndup\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, any\n\n\n\n\n\nDuplicates the topmost value of the stack.\n\n\n1 dup #=> 1 1\n\n\n\n\n\ne\n\n\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPushes Euler's number onto stack.\n\n\n\n\nemit\n\n\n\n  \nTakes:\n\n  \nnumber\n\n\n\n\n\nOutputs given Unicode code point into the standard output stream. Range\nerror will be thrown if the given number is not a valid Unicode code\npoint.\n\n\n\n\nerror?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is an error.\n\n\n\n\nfalse\n\n\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nPushes the boolean value false onto stack.\n\n\n\n\nglobals\n\n\n\n  \nGives:\n\n  \nobject\n\n\n\n\n\nReturns the global dictionary as an object.\n\n\n\n\nif\n\n\n\n  \nTakes:\n\n  \nboolean, quote\n\n\n\n\n\nExecutes quote if the boolean value is true.\n\n\n\n\nif-else\n\n\n\n  \nTakes:\n\n  \nboolean, quote, quote\n\n\n\n\n\nCalls first quote if boolean value is true, second quote otherwise.\n\n\n\n\nimport\n\n\n\n  \nTakes:\n\n  \nstring\n\n\n\n\n\nImports module from given path and adds all of its exported words into\nthis execution context.\n\n\n\n\ninf\n\n\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPushes the value of positive infinity onto stack.\n\n\n\n\nlocals\n\n\n\n  \nGives:\n\n  \nobject\n\n\n\n\n\nReturns the local dictionary of current execution context as an object.\n\n\n\n\nnan\n\n\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPushes the value of NaN (not a number) onto stack.\n\n\n\n\nnip\n\n\n\n  \nTakes:\n\n  \nany, any\n\n  \nGives:\n\n  \nany\n\n\n\n\n\nDrops the first value and pushes the second value onto stack.\n\n\n1 2 nip #=> 2\n\n\n\n\n\nnop\n\n\nDoes nothing. Can be used to construct empty quotes.\n\n\n\n\nnow\n\n\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nReturns the number of seconds that have elapsed since the  Unix epoch\n(1 January 1970 00:00:00 UTC) rounded to the nearest integer.\n\n\n\n\nnull\n\n\n\n  \nGives:\n\n  \nnull\n\n\n\n\n\nPushes the null value onto stack.\n\n\n\n\nnull?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is null.\n\n\n\n\nnumber?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is a number.\n\n\n\n\nobject?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is an object.\n\n\n\n\nover\n\n\n\n  \nTakes:\n\n  \nany, any\n\n  \nGives:\n\n  \nany, any, any\n\n\n\n\n\nCopies second topmost value of the stack into topmost value of the\nstack.\n\n\n1 2 over #=> 1 2 1\n\n\n\n\n\npi\n\n\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPushes the value of pi onto stack.\n\n\n\n\nprint\n\n\n\n  \nTakes:\n\n  \nany\n\n\n\n\n\nPrints topmost value of the stack to stdout.\n\n\n\n\nprintln\n\n\n\n  \nTakes:\n\n  \nany\n\n\n\n\n\nPrints the topmost value of the stack to stdout with a terminating new\nline.\n\n\n\n\nproto\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, object\n\n\n\n\n\nRetrieves proto of the topmost value. If the topmost value of the stack\nis null, null will be returned instead.\n\n\n\n\nquote?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is a quote.\n\n\n\n\nrange-error\n\n\n\n  \nTakes:\n\n  \nstring|null\n\n  \nGives:\n\n  \nerror\n\n\n\n\n\nConstruct an instance of range error with given optional error message\nand places it on the stack.\n\n\n\n\nrot\n\n\n\n  \nTakes:\n\n  \nany, any, any\n\n  \nGives:\n\n  \nany, any, any\n\n\n\n\n\nRotates the three topmost values on the stack.\n\n\n1 2 3 rot #=> 2 3 1\n\n\n\n\n\nstring?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is a string.\n\n\n\n\nswap\n\n\n\n  \nTakes:\n\n  \nany, any\n\n  \nGives:\n\n  \nany, any\n\n\n\n\n\nSwaps positions of the two topmost values on the stack.\n\n\n1 2 swap #=> 2 1\n\n\n\n\n\nsymbol?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is symbol.\n\n\n\n\ntrue\n\n\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nPushes the boolean value true onto stack.\n\n\n\n\ntry\n\n\n\n  \nTakes:\n\n  \nquote, quote\n\n\n\n\n\nExecutes first quote and if it throws an error, calls second quote with\nthe error on top of the stack.\n\n\n\n\ntry-else\n\n\n\n  \nTakes:\n\n  \nquote, quote, quote\n\n\n\n\n\nExecutes first quote and if it throws an error, calls second quote with\nthe error on top of the stack. If no error was thrown, third quote will\nbe called instead.\n\n\n\n\ntuck\n\n\n\n  \nTakes:\n\n  \nany, any\n\n  \nGives:\n\n  \nany, any, any\n\n\n\n\n\nCopies the topmost value of the stack as the third topmost value of the\nstack.\n\n\n1 2 tuck #=> 2 1 2\n\n\n\n\n\ntype-error\n\n\n\n  \nTakes:\n\n  \nstring|null\n\n  \nGives:\n\n  \nerror\n\n\n\n\n\nConstruct an instance of type error with with given optional error\nmessage and places it on the stack.\n\n\n\n\ntypeof\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, string\n\n\n\n\n\nReturns name of the type of the topmost value as a string.\n\n\n\n\nunknown-error\n\n\n\n  \nTakes:\n\n  \nstring|null\n\n  \nGives:\n\n  \nerror\n\n\n\n\n\nConstruct an instance of unknown error with with given optional error\nmessage and places it on the stack.\n\n\n\n\nvalue-error\n\n\n\n  \nTakes:\n\n  \nstring|null\n\n  \nGives:\n\n  \nerror\n\n\n\n\n\nConstructs an instance of value error with given optional error message\nand places it on the stack.\n\n\n\n\nversion\n\n\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nReturns version of the Plorth interpreter as string.\n\n\n\n\nwhile\n\n\n\n  \nTakes:\n\n  \nquote, quote\n\n\n\n\n\nExecutes second quote as long as the first quote returns true.\n\n\n\n\nword?\n\n\n\n  \nTakes:\n\n  \nany\n\n  \nGives:\n\n  \nany, boolean\n\n\n\n\n\nReturns true if the topmost value of the stack is word.\n\n\narray\n\n\n\n\n!\n\n\n\n  \nTakes:\n\n  \nany, number, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nSets value in the array at given index. Negative indices count backwards\nfrom the end. If the index is larger than the number of elements in the\narray, the value will be appended as the last element of the array.\n\n\n\n\n&\n\n\n\n  \nTakes:\n\n  \narray, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nSet intersection: Returns a new array containing unique elements common to\nthe two arrays.\n\n\n\n\n*\n\n\n\n  \nTakes:\n\n  \nnumber, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nRepeats the array given number of times.\n\n\n\n\n+\n\n\n\n  \nTakes:\n\n  \narray, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nConcatenates the contents of two arrays and returns the result.\n\n\n\n\n@\n\n\n\n  \nTakes:\n\n  \nnumber, array\n\n  \nGives:\n\n  \narray, any\n\n\n\n\n\nRetrieves a value from the array at given numerical index. Negative\nindices count backwards from the end. If the given index is out of bounds,\narange error will be thrown.\n\n\n\n\nevery?\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n  \nGives:\n\n  \narray, boolean\n\n\n\n\n\nTests whether all elements in the array satisfy the provided testing\nquote.\n\n\n\n\nextract\n\n\n\n  \nTakes:\n\n  \narray\n\n  \nGives:\n\n  \nany...\n\n\n\n\n\nExtracts all values from the array and places them onto the stack.\n\n\n\n\nfilter\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nRemoves elements of the array that do not satisfy the provided testing\nquote.\n\n\n\n\nfind\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n  \nGives:\n\n  \narray, any|null\n\n\n\n\n\nReturns the first element from the array that satisfies the provided\ntesting quote. Otherwise null is returned.\n\n\n\n\nfind-index\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n  \nGives:\n\n  \narray, number|null\n\n\n\n\n\nReturns the index of the first element in the array that satisfies the\nprovided testing quote. Otherwise null is returned.\n\n\n\n\nfor-each\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n\n\n\n\nRuns quote once for every element in the array.\n\n\n\n\nincludes?\n\n\n\n  \nTakes:\n\n  \nany, array\n\n  \nGives:\n\n  \narray, boolean\n\n\n\n\n\nSearches for given value in the array and returns true if it's included\nand false if it's not.\n\n\n\n\nindex-of\n\n\n\n  \nTakes:\n\n  \nany, array\n\n  \nGives:\n\n  \narray, number|null\n\n\n\n\n\nSearches for given value from the array and returns its index in the array\nif it's included in the array and null if it's not.\n\n\n\n\njoin\n\n\n\n  \nTakes:\n\n  \nstring, array\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nConcatenates all elements from the array into single string delimited by\nthe given separator string.\n\n\n\n\nlength\n\n\n\n  \nTakes:\n\n  \narray\n\n  \nGives:\n\n  \narray, number\n\n\n\n\n\nReturns the number of elements in the array, while keeping the array on\nthe stack.\n\n\n\n\nmap\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nApplies quote once for each element in the array and constructs a new\narray from values returned by the quote.\n\n\n\n\npop\n\n\n\n  \nTakes:\n\n  \narray\n\n  \nGives:\n\n  \narray, any\n\n\n\n\n\nRemoves last element from the array and places it onto the stack.\n\n\n[1, 2, 3] pop  #=> [1, 2] 3\n\n\n\n\n\npush\n\n\n\n  \nTakes:\n\n  \nany, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nConstructs new array where first value has been pushed as the last element\nof the existing array.\n\n\n4 [1, 2, 3] push  #=> [1, 2, 3, 4]\n\n\n\n\n\nreduce\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n  \nGives:\n\n  \nany\n\n\n\n\n\nApplies given quote against an accumulator and each element in the array\nto reduce it into a single value.\n\n\n\n\nreverse\n\n\n\n  \nTakes:\n\n  \narray\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nReverses the array. The first array element becomes the last and the last\narray element becomes first.\n\n\n\n\nsome?\n\n\n\n  \nTakes:\n\n  \nquote, array\n\n  \nGives:\n\n  \narray, boolean\n\n\n\n\n\nTests whether any element in the array satisfies the provided quote.\n\n\n\n\nuniq\n\n\n\n  \nTakes:\n\n  \narray\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nRemoves duplicate elements from the array.\n\n\n\n\n|\n\n\n\n  \nTakes:\n\n  \narray, array\n\n  \nGives:\n\n  \narray\n\n\n\n\n\nSet union: Returns a new array by joining the two given arrays, excluding\nany duplicates and preserving the order of the given arrays.\n\n\nboolean\n\n\n\n\n?\n\n\n\n  \nTakes:\n\n  \nany, any, boolean\n\n  \nGives:\n\n  \nany\n\n\n\n\n\nSelects between two values based on the boolean value. First value is\nreturned when the boolean value is true and the second one is returned\nwhen it's false.\n\n\n\"greater\" \"less\" 5 6 > ?  #=> \"less\"\n\n\n\n\n\nand\n\n\n\n  \nTakes:\n\n  \nboolean, boolean\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nLogical AND. Returns true if both values are true.\n\n\n\n\nnot\n\n\n\n  \nTakes:\n\n  \nboolean\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nNegates given boolean value.\n\n\n\n\nor\n\n\n\n  \nTakes:\n\n  \nboolean, boolean\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nLogical OR. Returns true if either one of the values are true.\n\n\n\n\nxor\n\n\n\n  \nTakes:\n\n  \nboolean, boolean\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nExclusive OR.\n\n\nerror\n\n\n\n\ncode\n\n\n\n  \nTakes:\n\n  \nerror\n\n  \nGives:\n\n  \nerror, number\n\n\n\n\n\nReturns error code extracted from the error in numeric form.\n\n\n\n\nmessage\n\n\n\n  \nTakes:\n\n  \nerror\n\n  \nGives:\n\n  \nerror, string|null\n\n\n\n\n\nReturns error message extracted from the error, or null if the error does\nnot have any error message.\n\n\n\n\nthrow\n\n\n\n  \nTakes:\n\n  \nerror\n\n\n\n\n\nSets given error as current error of the execution context.\n\n\nnumber\n\n\n\n\n%\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nComputes the modulo of the first number with respect to the second number\ni.e. the remainder after floor division.\n\n\n\n\n*\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPerforms multiplication on the two given numbers.\n\n\n\n\n+\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nPerforms addition on the two given numbers.\n\n\n\n\n-\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nSubtracts the second number from the first and returns the result.\n\n\n\n\n/\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nDivides the first number by the second and returns the result.\n\n\n\n\n<\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nReturns true if the first number is less than the second one.\n\n\n\n\n<=\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nReturns true if the first number is less than or equal to the second one.\n\n\n\n\n>\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nReturns true if the first number is greater than the second one.\n\n\n\n\n>=\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nReturns true if the first number is greater than or equal to the second\none.\n\n\n\n\nabs\n\n\n\n  \nTakes:\n\n  \nnumber\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nReturns absolute value of the number.\n\n\n\n\nceil\n\n\n\n  \nTakes:\n\n  \nnumber\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nComputes the smallest integer value not less than given number.\n\n\n\n\nclamp\n\n\n\n  \nTakes:\n\n  \nnumber, number, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nClamps the topmost number between the minimum and maximum limits.\n\n\n\n\nfinite?\n\n\n\n  \nTakes:\n\n  \nnum\n\n  \nGives:\n\n  \nnumber, boolean\n\n\n\n\n\nReturns true if given number is finite.\n\n\n\n\nfloor\n\n\n\n  \nTakes:\n\n  \nnumber\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nComputes the largest integer value not greater than given number.\n\n\n\n\nin-range?\n\n\n\n  \nTakes:\n\n  \nnumber, number, number\n\n  \nGives:\n\n  \nboolean\n\n\n\n\n\nTests whether the topmost number is in range of given minimum and maximum\nnumbers.\n\n\n\n\nmax\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nReturns maximum of two numbers.\n\n\n\n\nmin\n\n\n\n  \nTakes:\n\n  \nnumber, number\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nReturns minimum of two numbers.\n\n\n\n\nnan?\n\n\n\n  \nTakes:\n\n  \nnumber\n\n  \nGives:\n\n  \nnumber, boolean\n\n\n\n\n\nReturns true if given number is NaN.\n\n\n\n\nround\n\n\n\n  \nTakes:\n\n  \nnumber\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nRounds given number to nearest integer value.\n\n\n\n\ntimes\n\n\n\n  \nTakes:\n\n  \nquote, number\n\n\n\n\n\nExecutes a quote given number of times.\n\n\nobject\n\n\n\n\n!\n\n\n\n  \nTakes:\n\n  \nany, string, object\n\n  \nGives:\n\n  \nobject\n\n\n\n\n\nConstructs a copy of the object with new named property either introduced\nor replaced.\n\n\n\n\n+\n\n\n\n  \nTakes:\n\n  \nobject, object\n\n  \nGives:\n\n  \nobject\n\n\n\n\n\nCombines the contents of two objects together and returns the result. If\nthe two objects share keys the second object's values take precedence.\n\n\n\n\n@\n\n\n\n  \nTakes:\n\n  \nstring, object\n\n  \nGives:\n\n  \nobject, any\n\n\n\n\n\nRetrieves the value identified by given string from properties of the\nobject. If the object does not have such a property, range error will be\nthrown. Notice that inherited properties are also included in the search.\n\n\n\n\ndelete\n\n\n\n  \nTakes:\n\n  \nstring, object\n\n  \nGives:\n\n  \nobject\n\n\n\n\n\nConstructs a copy of the object with the named property removed.\n\n\n\n\nhas-own?\n\n\n\n  \nTakes:\n\n  \nstring, object\n\n  \nGives:\n\n  \nobject, boolean\n\n\n\n\n\nTests whether the object has own property with given identifier. Inherited\nproperties are not included in the search.\n\n\n\n\nhas?\n\n\n\n  \nTakes:\n\n  \nstring, object\n\n  \nGives:\n\n  \nobject, boolean\n\n\n\n\n\nTests whether the object has property with given identifier. Notice that\ninherited properties are also included in the search.\n\n\n\n\nkeys\n\n\n\n  \nTakes:\n\n  \nobject\n\n  \nGives:\n\n  \nobject, array\n\n\n\n\n\nRetrieves all keys from the object and returns them in an array. Notice\nthat inherited properties are not included in the list.\n\n\n\n\nnew\n\n\n\n  \nTakes:\n\n  \nany...\n\n  \nGives:\n\n  \nobject\n\n\n\n\n\nConstructs a new instance of the object and invokes its constructor if it\nhas one with the newly constructed object pushed on top of the stack.\n\n\nType error will be thrown if the object has no \"prototype\" property.\n\n\n\n\nvalues\n\n\n\n  \nTakes:\n\n  \nobject\n\n  \nGives:\n\n  \nobject, array\n\n\n\n\n\nRetrieves all values from the object and returns them in an array. Notice\nthat inherited properties are not included in the list.\n\n\nquote\n\n\n\n\n2dip\n\n\n\n  \nTakes:\n\n  \nany, any, quote\n\n  \nGives:\n\n  \nany, any\n\n\n\n\n\nTemporarily hides two given values from the stack and calls given quote.\nOnce the quote has returned from it's execution, hidden values will be\nplaced back on the stack.\n\n\n\n\n>word\n\n\n\n  \nTakes:\n\n  \nsymbol, quote\n\n  \nGives:\n\n  \nword\n\n\n\n\n\nConstructs word from given pair of symbol and quote.\n\n\n\n\ncall\n\n\n\n  \nTakes:\n\n  \nquote\n\n\n\n\n\nExecutes the quote taken from the top of the stack.\n\n\n\n\ncompose\n\n\n\n  \nTakes:\n\n  \nquote, quote\n\n  \nGives:\n\n  \nquote\n\n\n\n\n\nConstructs a new quote which will call the two given quotes in sequence.\n\n\n\n\ncurry\n\n\n\n  \nTakes:\n\n  \nany, quote\n\n  \nGives:\n\n  \nquote\n\n\n\n\n\nConstructs a curried quote where given value will be pushed onto the stack\nbefore calling the original quote.\n\n\n\n\ndip\n\n\n\n  \nTakes:\n\n  \nany, quote\n\n  \nGives:\n\n  \nany\n\n\n\n\n\nTemporarily hides given value from the stack and calls given quote. Once\nthe quote has returned from it's execution, hidden value will be placed\nback on the stack.\n\n\n\n\nnegate\n\n\n\n  \nTakes:\n\n  \nquote\n\n  \nGives:\n\n  \nquote\n\n\n\n\n\nConstructs a negated version of given quote which negates the boolean\nresult returned by the original quote.\n\n\nstring\n\n\n\n\n*\n\n\n\n  \nTakes:\n\n  \nnumber, string\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nRepeats the string given number of times.\n\n\n\n\n+\n\n\n\n  \nTakes:\n\n  \nstring, string\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nConcatenates the contents of the two strings and returns the result.\n\n\n\n\n>number\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nnumber\n\n\n\n\n\nConverts string into a floating point decimal number, or throws a value\nerror if the number cannot be converted into one.\n\n\n\n\n>symbol\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nsymbol\n\n\n\n\n\nConverts given string into symbol. Value error will be thrown if the string\nis empty or contains whitespace or non-symbolic characters such as separators.\n\n\n\n\n@\n\n\n\n  \nTakes:\n\n  \nnumber, string\n\n  \nGives:\n\n  \nstring, string\n\n\n\n\n\nRetrieves a character at given index. Negative indices count backwards\nfrom the end of the string. If given index is out of bounds, a range error\nwill be thrown.\n\n\n\n\ncapitalize\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nConverts the first character of the string into upper case and the\nremaining characters into lower case.\n\n\n\n\nchars\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, array\n\n\n\n\n\nExtracts characters from the string and returns them in an array of\nsubstrings.\n\n\n\n\nlength\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, number\n\n\n\n\n\nReturns the length of the string.\n\n\n\n\nlines\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, array\n\n\n\n\n\nExtracts lines from the string and returns them in an array.\n\n\n\n\nlower-case\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nConverts the string into lower case.\n\n\n\n\nlower-case?\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, boolean\n\n\n\n\n\nTests whether the string contains only lower case characters. Empty strings\nreturn false.\n\n\n\n\nreverse\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nReverses the string.\n\n\n\n\nrunes\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, array\n\n\n\n\n\nExtracts Unicode code points from the string and returns them in an array\nof numbers.\n\n\n\n\nspace?\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, boolean\n\n\n\n\n\nTests whether the string contains only whitespace characters. Empty strings\nreturn false.\n\n\n\n\nswap-case\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nTurns lower case characters in the string into upper case and vice versa.\n\n\n\n\ntrim\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nStrips whitespace from the begining and the end of the string.\n\n\n\n\ntrim-left\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nStrips whitespace from the begining of the string.\n\n\n\n\ntrim-right\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring\n\n\n\n\n\nStrips whitespace from the end of the string.\n\n\n\n\nupper-case?\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, boolean\n\n\n\n\n\nTests whether the string contains only upper case characters. Empty strings\nreturn false.\n\n\n\n\nwords\n\n\n\n  \nTakes:\n\n  \nstring\n\n  \nGives:\n\n  \nstring, array\n\n\n\n\n\nExtracts white space separated words from the string and returns them in\nan array.\n\n\nsymbol\n\n\n\n\ncall\n\n\n\n  \nTakes:\n\n  \nsymbol\n\n\n\n\n\nResolves given symbol into word or value, depending on the contents of the\ndata stack, local dictionary and global dictionary and executes it. If the\nsymbol does not resolve into any kind of word or value, number conversion\nis attempted on it. If that also fails, reference error will be thrown.\n\n\nword\n\n\n\n\ncall\n\n\n\n  \nTakes:\n\n  \nword\n\n\n\n\n\nExecutes body of the given word.\n\n\n\n\ndefine\n\n\n\n  \nTakes:\n\n  \nword\n\n\n\n\n\nInserts given word into current local dictionary.\n\n\n\n\nquote\n\n\n\n  \nTakes:\n\n  \nword\n\n  \nGives:\n\n  \nword, quote\n\n\n\n\n\nExtracts quote which acts as the body of the word and places it onto top\nof the stack.\n\n\n\n\nsymbol\n\n\n\n  \nTakes:\n\n  \nword\n\n  \nGives:\n\n  \nword, symbol\n\n\n\n\n\nExtracts symbol from the word and places it onto top of the stack.",
            "title": "API reference"
        },
        {
            "location": "/api/#api-reference",
            "text": "",
            "title": "API reference"
        },
        {
            "location": "/api/#global-dictionary",
            "text": "",
            "title": "Global dictionary"
        },
        {
            "location": "/api/#_1",
            "text": "Takes: \n   any, any \n   Gives: \n   boolean   Tests whether the two topmost values of the stack are not equal.",
            "title": "!="
        },
        {
            "location": "/api/#-inf",
            "text": "Gives: \n   number   Pushes the value of negative infinity onto stack.",
            "title": "-inf"
        },
        {
            "location": "/api/#2drop",
            "text": "Takes: \n   any, any   Discards the two topmost values from the stack.  1 2 3 2drop #=> 1",
            "title": "2drop"
        },
        {
            "location": "/api/#2dup",
            "text": "Takes: \n   any, any \n   Gives: \n   any, any, any, any   Duplicates two topmost values of the stack.  1 2 2dup #=> 1 2 1 2",
            "title": "2dup"
        },
        {
            "location": "/api/#_2",
            "text": "Takes: \n   any, any \n   Gives: \n   boolean   Tests whether the two topmost values of the stack are equal.",
            "title": "="
        },
        {
            "location": "/api/#boolean",
            "text": "Takes: \n   any \n   Gives: \n   boolean   Converts the topmost value of the stack into a boolean. Null and false\nwill become false while everything else will become true.",
            "title": "&gt;boolean"
        },
        {
            "location": "/api/#source",
            "text": "Takes: \n   any \n   Gives: \n   string   Converts the topmost value of the stack into a string that most accurately\nrepresents what the value would look like in source code.",
            "title": "&gt;source"
        },
        {
            "location": "/api/#string",
            "text": "Takes: \n   any \n   Gives: \n   string   Converts the topmost value of the stack into a string. Null will become\nan empty string.",
            "title": "&gt;string"
        },
        {
            "location": "/api/#args",
            "text": "Gives: \n   array   Returns command line arguments given to the interpreter as an array of\nstrings.",
            "title": "args"
        },
        {
            "location": "/api/#array",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is an array.",
            "title": "array?"
        },
        {
            "location": "/api/#boolean_1",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is a boolean.",
            "title": "boolean?"
        },
        {
            "location": "/api/#clear",
            "text": "Clears the entire stack of current context.",
            "title": "clear"
        },
        {
            "location": "/api/#compile",
            "text": "Takes: \n   string \n   Gives: \n   quote   Compiles given string of source code into a quote.",
            "title": "compile"
        },
        {
            "location": "/api/#const",
            "text": "Takes: \n   any, string   Declares given value as constant in the current context with name\nidentified by given string.",
            "title": "const"
        },
        {
            "location": "/api/#depth",
            "text": "Gives: \n   number   Pushes current depth of the stack onto stack.",
            "title": "depth"
        },
        {
            "location": "/api/#drop",
            "text": "Takes: \n   any   Discards topmost value from the stack.  1 drop #=> empty stack",
            "title": "drop"
        },
        {
            "location": "/api/#dup",
            "text": "Takes: \n   any \n   Gives: \n   any, any   Duplicates the topmost value of the stack.  1 dup #=> 1 1",
            "title": "dup"
        },
        {
            "location": "/api/#e",
            "text": "Gives: \n   number   Pushes Euler's number onto stack.",
            "title": "e"
        },
        {
            "location": "/api/#emit",
            "text": "Takes: \n   number   Outputs given Unicode code point into the standard output stream. Range\nerror will be thrown if the given number is not a valid Unicode code\npoint.",
            "title": "emit"
        },
        {
            "location": "/api/#error",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is an error.",
            "title": "error?"
        },
        {
            "location": "/api/#false",
            "text": "Gives: \n   boolean   Pushes the boolean value false onto stack.",
            "title": "false"
        },
        {
            "location": "/api/#globals",
            "text": "Gives: \n   object   Returns the global dictionary as an object.",
            "title": "globals"
        },
        {
            "location": "/api/#if",
            "text": "Takes: \n   boolean, quote   Executes quote if the boolean value is true.",
            "title": "if"
        },
        {
            "location": "/api/#if-else",
            "text": "Takes: \n   boolean, quote, quote   Calls first quote if boolean value is true, second quote otherwise.",
            "title": "if-else"
        },
        {
            "location": "/api/#import",
            "text": "Takes: \n   string   Imports module from given path and adds all of its exported words into\nthis execution context.",
            "title": "import"
        },
        {
            "location": "/api/#inf",
            "text": "Gives: \n   number   Pushes the value of positive infinity onto stack.",
            "title": "inf"
        },
        {
            "location": "/api/#locals",
            "text": "Gives: \n   object   Returns the local dictionary of current execution context as an object.",
            "title": "locals"
        },
        {
            "location": "/api/#nan",
            "text": "Gives: \n   number   Pushes the value of NaN (not a number) onto stack.",
            "title": "nan"
        },
        {
            "location": "/api/#nip",
            "text": "Takes: \n   any, any \n   Gives: \n   any   Drops the first value and pushes the second value onto stack.  1 2 nip #=> 2",
            "title": "nip"
        },
        {
            "location": "/api/#nop",
            "text": "Does nothing. Can be used to construct empty quotes.",
            "title": "nop"
        },
        {
            "location": "/api/#now",
            "text": "Gives: \n   number   Returns the number of seconds that have elapsed since the  Unix epoch\n(1 January 1970 00:00:00 UTC) rounded to the nearest integer.",
            "title": "now"
        },
        {
            "location": "/api/#null",
            "text": "Gives: \n   null   Pushes the null value onto stack.",
            "title": "null"
        },
        {
            "location": "/api/#null_1",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is null.",
            "title": "null?"
        },
        {
            "location": "/api/#number",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is a number.",
            "title": "number?"
        },
        {
            "location": "/api/#object",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is an object.",
            "title": "object?"
        },
        {
            "location": "/api/#over",
            "text": "Takes: \n   any, any \n   Gives: \n   any, any, any   Copies second topmost value of the stack into topmost value of the\nstack.  1 2 over #=> 1 2 1",
            "title": "over"
        },
        {
            "location": "/api/#pi",
            "text": "Gives: \n   number   Pushes the value of pi onto stack.",
            "title": "pi"
        },
        {
            "location": "/api/#print",
            "text": "Takes: \n   any   Prints topmost value of the stack to stdout.",
            "title": "print"
        },
        {
            "location": "/api/#println",
            "text": "Takes: \n   any   Prints the topmost value of the stack to stdout with a terminating new\nline.",
            "title": "println"
        },
        {
            "location": "/api/#proto",
            "text": "Takes: \n   any \n   Gives: \n   any, object   Retrieves proto of the topmost value. If the topmost value of the stack\nis null, null will be returned instead.",
            "title": "proto"
        },
        {
            "location": "/api/#quote",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is a quote.",
            "title": "quote?"
        },
        {
            "location": "/api/#range-error",
            "text": "Takes: \n   string|null \n   Gives: \n   error   Construct an instance of range error with given optional error message\nand places it on the stack.",
            "title": "range-error"
        },
        {
            "location": "/api/#rot",
            "text": "Takes: \n   any, any, any \n   Gives: \n   any, any, any   Rotates the three topmost values on the stack.  1 2 3 rot #=> 2 3 1",
            "title": "rot"
        },
        {
            "location": "/api/#string_1",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is a string.",
            "title": "string?"
        },
        {
            "location": "/api/#swap",
            "text": "Takes: \n   any, any \n   Gives: \n   any, any   Swaps positions of the two topmost values on the stack.  1 2 swap #=> 2 1",
            "title": "swap"
        },
        {
            "location": "/api/#symbol",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is symbol.",
            "title": "symbol?"
        },
        {
            "location": "/api/#true",
            "text": "Gives: \n   boolean   Pushes the boolean value true onto stack.",
            "title": "true"
        },
        {
            "location": "/api/#try",
            "text": "Takes: \n   quote, quote   Executes first quote and if it throws an error, calls second quote with\nthe error on top of the stack.",
            "title": "try"
        },
        {
            "location": "/api/#try-else",
            "text": "Takes: \n   quote, quote, quote   Executes first quote and if it throws an error, calls second quote with\nthe error on top of the stack. If no error was thrown, third quote will\nbe called instead.",
            "title": "try-else"
        },
        {
            "location": "/api/#tuck",
            "text": "Takes: \n   any, any \n   Gives: \n   any, any, any   Copies the topmost value of the stack as the third topmost value of the\nstack.  1 2 tuck #=> 2 1 2",
            "title": "tuck"
        },
        {
            "location": "/api/#type-error",
            "text": "Takes: \n   string|null \n   Gives: \n   error   Construct an instance of type error with with given optional error\nmessage and places it on the stack.",
            "title": "type-error"
        },
        {
            "location": "/api/#typeof",
            "text": "Takes: \n   any \n   Gives: \n   any, string   Returns name of the type of the topmost value as a string.",
            "title": "typeof"
        },
        {
            "location": "/api/#unknown-error",
            "text": "Takes: \n   string|null \n   Gives: \n   error   Construct an instance of unknown error with with given optional error\nmessage and places it on the stack.",
            "title": "unknown-error"
        },
        {
            "location": "/api/#value-error",
            "text": "Takes: \n   string|null \n   Gives: \n   error   Constructs an instance of value error with given optional error message\nand places it on the stack.",
            "title": "value-error"
        },
        {
            "location": "/api/#version",
            "text": "Gives: \n   string   Returns version of the Plorth interpreter as string.",
            "title": "version"
        },
        {
            "location": "/api/#while",
            "text": "Takes: \n   quote, quote   Executes second quote as long as the first quote returns true.",
            "title": "while"
        },
        {
            "location": "/api/#word",
            "text": "Takes: \n   any \n   Gives: \n   any, boolean   Returns true if the topmost value of the stack is word.",
            "title": "word?"
        },
        {
            "location": "/api/#array_1",
            "text": "",
            "title": "array"
        },
        {
            "location": "/api/#_3",
            "text": "Takes: \n   any, number, array \n   Gives: \n   array   Sets value in the array at given index. Negative indices count backwards\nfrom the end. If the index is larger than the number of elements in the\narray, the value will be appended as the last element of the array.",
            "title": "!"
        },
        {
            "location": "/api/#_4",
            "text": "Takes: \n   array, array \n   Gives: \n   array   Set intersection: Returns a new array containing unique elements common to\nthe two arrays.",
            "title": "&amp;"
        },
        {
            "location": "/api/#_5",
            "text": "Takes: \n   number, array \n   Gives: \n   array   Repeats the array given number of times.",
            "title": "*"
        },
        {
            "location": "/api/#_6",
            "text": "Takes: \n   array, array \n   Gives: \n   array   Concatenates the contents of two arrays and returns the result.",
            "title": "+"
        },
        {
            "location": "/api/#_7",
            "text": "Takes: \n   number, array \n   Gives: \n   array, any   Retrieves a value from the array at given numerical index. Negative\nindices count backwards from the end. If the given index is out of bounds,\narange error will be thrown.",
            "title": "@"
        },
        {
            "location": "/api/#every",
            "text": "Takes: \n   quote, array \n   Gives: \n   array, boolean   Tests whether all elements in the array satisfy the provided testing\nquote.",
            "title": "every?"
        },
        {
            "location": "/api/#extract",
            "text": "Takes: \n   array \n   Gives: \n   any...   Extracts all values from the array and places them onto the stack.",
            "title": "extract"
        },
        {
            "location": "/api/#filter",
            "text": "Takes: \n   quote, array \n   Gives: \n   array   Removes elements of the array that do not satisfy the provided testing\nquote.",
            "title": "filter"
        },
        {
            "location": "/api/#find",
            "text": "Takes: \n   quote, array \n   Gives: \n   array, any|null   Returns the first element from the array that satisfies the provided\ntesting quote. Otherwise null is returned.",
            "title": "find"
        },
        {
            "location": "/api/#find-index",
            "text": "Takes: \n   quote, array \n   Gives: \n   array, number|null   Returns the index of the first element in the array that satisfies the\nprovided testing quote. Otherwise null is returned.",
            "title": "find-index"
        },
        {
            "location": "/api/#for-each",
            "text": "Takes: \n   quote, array   Runs quote once for every element in the array.",
            "title": "for-each"
        },
        {
            "location": "/api/#includes",
            "text": "Takes: \n   any, array \n   Gives: \n   array, boolean   Searches for given value in the array and returns true if it's included\nand false if it's not.",
            "title": "includes?"
        },
        {
            "location": "/api/#index-of",
            "text": "Takes: \n   any, array \n   Gives: \n   array, number|null   Searches for given value from the array and returns its index in the array\nif it's included in the array and null if it's not.",
            "title": "index-of"
        },
        {
            "location": "/api/#join",
            "text": "Takes: \n   string, array \n   Gives: \n   string   Concatenates all elements from the array into single string delimited by\nthe given separator string.",
            "title": "join"
        },
        {
            "location": "/api/#length",
            "text": "Takes: \n   array \n   Gives: \n   array, number   Returns the number of elements in the array, while keeping the array on\nthe stack.",
            "title": "length"
        },
        {
            "location": "/api/#map",
            "text": "Takes: \n   quote, array \n   Gives: \n   array   Applies quote once for each element in the array and constructs a new\narray from values returned by the quote.",
            "title": "map"
        },
        {
            "location": "/api/#pop",
            "text": "Takes: \n   array \n   Gives: \n   array, any   Removes last element from the array and places it onto the stack.  [1, 2, 3] pop  #=> [1, 2] 3",
            "title": "pop"
        },
        {
            "location": "/api/#push",
            "text": "Takes: \n   any, array \n   Gives: \n   array   Constructs new array where first value has been pushed as the last element\nof the existing array.  4 [1, 2, 3] push  #=> [1, 2, 3, 4]",
            "title": "push"
        },
        {
            "location": "/api/#reduce",
            "text": "Takes: \n   quote, array \n   Gives: \n   any   Applies given quote against an accumulator and each element in the array\nto reduce it into a single value.",
            "title": "reduce"
        },
        {
            "location": "/api/#reverse",
            "text": "Takes: \n   array \n   Gives: \n   array   Reverses the array. The first array element becomes the last and the last\narray element becomes first.",
            "title": "reverse"
        },
        {
            "location": "/api/#some",
            "text": "Takes: \n   quote, array \n   Gives: \n   array, boolean   Tests whether any element in the array satisfies the provided quote.",
            "title": "some?"
        },
        {
            "location": "/api/#uniq",
            "text": "Takes: \n   array \n   Gives: \n   array   Removes duplicate elements from the array.",
            "title": "uniq"
        },
        {
            "location": "/api/#_8",
            "text": "Takes: \n   array, array \n   Gives: \n   array   Set union: Returns a new array by joining the two given arrays, excluding\nany duplicates and preserving the order of the given arrays.",
            "title": "|"
        },
        {
            "location": "/api/#boolean_2",
            "text": "",
            "title": "boolean"
        },
        {
            "location": "/api/#_9",
            "text": "Takes: \n   any, any, boolean \n   Gives: \n   any   Selects between two values based on the boolean value. First value is\nreturned when the boolean value is true and the second one is returned\nwhen it's false.  \"greater\" \"less\" 5 6 > ?  #=> \"less\"",
            "title": "?"
        },
        {
            "location": "/api/#and",
            "text": "Takes: \n   boolean, boolean \n   Gives: \n   boolean   Logical AND. Returns true if both values are true.",
            "title": "and"
        },
        {
            "location": "/api/#not",
            "text": "Takes: \n   boolean \n   Gives: \n   boolean   Negates given boolean value.",
            "title": "not"
        },
        {
            "location": "/api/#or",
            "text": "Takes: \n   boolean, boolean \n   Gives: \n   boolean   Logical OR. Returns true if either one of the values are true.",
            "title": "or"
        },
        {
            "location": "/api/#xor",
            "text": "Takes: \n   boolean, boolean \n   Gives: \n   boolean   Exclusive OR.",
            "title": "xor"
        },
        {
            "location": "/api/#error_1",
            "text": "",
            "title": "error"
        },
        {
            "location": "/api/#code",
            "text": "Takes: \n   error \n   Gives: \n   error, number   Returns error code extracted from the error in numeric form.",
            "title": "code"
        },
        {
            "location": "/api/#message",
            "text": "Takes: \n   error \n   Gives: \n   error, string|null   Returns error message extracted from the error, or null if the error does\nnot have any error message.",
            "title": "message"
        },
        {
            "location": "/api/#throw",
            "text": "Takes: \n   error   Sets given error as current error of the execution context.",
            "title": "throw"
        },
        {
            "location": "/api/#number_1",
            "text": "",
            "title": "number"
        },
        {
            "location": "/api/#_10",
            "text": "Takes: \n   number, number \n   Gives: \n   number   Computes the modulo of the first number with respect to the second number\ni.e. the remainder after floor division.",
            "title": "%"
        },
        {
            "location": "/api/#_11",
            "text": "Takes: \n   number, number \n   Gives: \n   number   Performs multiplication on the two given numbers.",
            "title": "*"
        },
        {
            "location": "/api/#_12",
            "text": "Takes: \n   number, number \n   Gives: \n   number   Performs addition on the two given numbers.",
            "title": "+"
        },
        {
            "location": "/api/#-",
            "text": "Takes: \n   number, number \n   Gives: \n   number   Subtracts the second number from the first and returns the result.",
            "title": "-"
        },
        {
            "location": "/api/#_13",
            "text": "Takes: \n   number, number \n   Gives: \n   number   Divides the first number by the second and returns the result.",
            "title": "/"
        },
        {
            "location": "/api/#_14",
            "text": "Takes: \n   number, number \n   Gives: \n   boolean   Returns true if the first number is less than the second one.",
            "title": "&lt;"
        },
        {
            "location": "/api/#_15",
            "text": "Takes: \n   number, number \n   Gives: \n   boolean   Returns true if the first number is less than or equal to the second one.",
            "title": "&lt;="
        },
        {
            "location": "/api/#_16",
            "text": "Takes: \n   number, number \n   Gives: \n   boolean   Returns true if the first number is greater than the second one.",
            "title": "&gt;"
        },
        {
            "location": "/api/#_17",
            "text": "Takes: \n   number, number \n   Gives: \n   boolean   Returns true if the first number is greater than or equal to the second\none.",
            "title": "&gt;="
        },
        {
            "location": "/api/#abs",
            "text": "Takes: \n   number \n   Gives: \n   number   Returns absolute value of the number.",
            "title": "abs"
        },
        {
            "location": "/api/#ceil",
            "text": "Takes: \n   number \n   Gives: \n   number   Computes the smallest integer value not less than given number.",
            "title": "ceil"
        },
        {
            "location": "/api/#clamp",
            "text": "Takes: \n   number, number, number \n   Gives: \n   number   Clamps the topmost number between the minimum and maximum limits.",
            "title": "clamp"
        },
        {
            "location": "/api/#finite",
            "text": "Takes: \n   num \n   Gives: \n   number, boolean   Returns true if given number is finite.",
            "title": "finite?"
        },
        {
            "location": "/api/#floor",
            "text": "Takes: \n   number \n   Gives: \n   number   Computes the largest integer value not greater than given number.",
            "title": "floor"
        },
        {
            "location": "/api/#in-range",
            "text": "Takes: \n   number, number, number \n   Gives: \n   boolean   Tests whether the topmost number is in range of given minimum and maximum\nnumbers.",
            "title": "in-range?"
        },
        {
            "location": "/api/#max",
            "text": "Takes: \n   number, number \n   Gives: \n   number   Returns maximum of two numbers.",
            "title": "max"
        },
        {
            "location": "/api/#min",
            "text": "Takes: \n   number, number \n   Gives: \n   number   Returns minimum of two numbers.",
            "title": "min"
        },
        {
            "location": "/api/#nan_1",
            "text": "Takes: \n   number \n   Gives: \n   number, boolean   Returns true if given number is NaN.",
            "title": "nan?"
        },
        {
            "location": "/api/#round",
            "text": "Takes: \n   number \n   Gives: \n   number   Rounds given number to nearest integer value.",
            "title": "round"
        },
        {
            "location": "/api/#times",
            "text": "Takes: \n   quote, number   Executes a quote given number of times.",
            "title": "times"
        },
        {
            "location": "/api/#object_1",
            "text": "",
            "title": "object"
        },
        {
            "location": "/api/#_18",
            "text": "Takes: \n   any, string, object \n   Gives: \n   object   Constructs a copy of the object with new named property either introduced\nor replaced.",
            "title": "!"
        },
        {
            "location": "/api/#_19",
            "text": "Takes: \n   object, object \n   Gives: \n   object   Combines the contents of two objects together and returns the result. If\nthe two objects share keys the second object's values take precedence.",
            "title": "+"
        },
        {
            "location": "/api/#_20",
            "text": "Takes: \n   string, object \n   Gives: \n   object, any   Retrieves the value identified by given string from properties of the\nobject. If the object does not have such a property, range error will be\nthrown. Notice that inherited properties are also included in the search.",
            "title": "@"
        },
        {
            "location": "/api/#delete",
            "text": "Takes: \n   string, object \n   Gives: \n   object   Constructs a copy of the object with the named property removed.",
            "title": "delete"
        },
        {
            "location": "/api/#has-own",
            "text": "Takes: \n   string, object \n   Gives: \n   object, boolean   Tests whether the object has own property with given identifier. Inherited\nproperties are not included in the search.",
            "title": "has-own?"
        },
        {
            "location": "/api/#has",
            "text": "Takes: \n   string, object \n   Gives: \n   object, boolean   Tests whether the object has property with given identifier. Notice that\ninherited properties are also included in the search.",
            "title": "has?"
        },
        {
            "location": "/api/#keys",
            "text": "Takes: \n   object \n   Gives: \n   object, array   Retrieves all keys from the object and returns them in an array. Notice\nthat inherited properties are not included in the list.",
            "title": "keys"
        },
        {
            "location": "/api/#new",
            "text": "Takes: \n   any... \n   Gives: \n   object   Constructs a new instance of the object and invokes its constructor if it\nhas one with the newly constructed object pushed on top of the stack.  Type error will be thrown if the object has no \"prototype\" property.",
            "title": "new"
        },
        {
            "location": "/api/#values",
            "text": "Takes: \n   object \n   Gives: \n   object, array   Retrieves all values from the object and returns them in an array. Notice\nthat inherited properties are not included in the list.",
            "title": "values"
        },
        {
            "location": "/api/#quote_1",
            "text": "",
            "title": "quote"
        },
        {
            "location": "/api/#2dip",
            "text": "Takes: \n   any, any, quote \n   Gives: \n   any, any   Temporarily hides two given values from the stack and calls given quote.\nOnce the quote has returned from it's execution, hidden values will be\nplaced back on the stack.",
            "title": "2dip"
        },
        {
            "location": "/api/#word_1",
            "text": "Takes: \n   symbol, quote \n   Gives: \n   word   Constructs word from given pair of symbol and quote.",
            "title": "&gt;word"
        },
        {
            "location": "/api/#call",
            "text": "Takes: \n   quote   Executes the quote taken from the top of the stack.",
            "title": "call"
        },
        {
            "location": "/api/#compose",
            "text": "Takes: \n   quote, quote \n   Gives: \n   quote   Constructs a new quote which will call the two given quotes in sequence.",
            "title": "compose"
        },
        {
            "location": "/api/#curry",
            "text": "Takes: \n   any, quote \n   Gives: \n   quote   Constructs a curried quote where given value will be pushed onto the stack\nbefore calling the original quote.",
            "title": "curry"
        },
        {
            "location": "/api/#dip",
            "text": "Takes: \n   any, quote \n   Gives: \n   any   Temporarily hides given value from the stack and calls given quote. Once\nthe quote has returned from it's execution, hidden value will be placed\nback on the stack.",
            "title": "dip"
        },
        {
            "location": "/api/#negate",
            "text": "Takes: \n   quote \n   Gives: \n   quote   Constructs a negated version of given quote which negates the boolean\nresult returned by the original quote.",
            "title": "negate"
        },
        {
            "location": "/api/#string_2",
            "text": "",
            "title": "string"
        },
        {
            "location": "/api/#_21",
            "text": "Takes: \n   number, string \n   Gives: \n   string   Repeats the string given number of times.",
            "title": "*"
        },
        {
            "location": "/api/#_22",
            "text": "Takes: \n   string, string \n   Gives: \n   string   Concatenates the contents of the two strings and returns the result.",
            "title": "+"
        },
        {
            "location": "/api/#number_2",
            "text": "Takes: \n   string \n   Gives: \n   number   Converts string into a floating point decimal number, or throws a value\nerror if the number cannot be converted into one.",
            "title": "&gt;number"
        },
        {
            "location": "/api/#symbol_1",
            "text": "Takes: \n   string \n   Gives: \n   symbol   Converts given string into symbol. Value error will be thrown if the string\nis empty or contains whitespace or non-symbolic characters such as separators.",
            "title": "&gt;symbol"
        },
        {
            "location": "/api/#_23",
            "text": "Takes: \n   number, string \n   Gives: \n   string, string   Retrieves a character at given index. Negative indices count backwards\nfrom the end of the string. If given index is out of bounds, a range error\nwill be thrown.",
            "title": "@"
        },
        {
            "location": "/api/#capitalize",
            "text": "Takes: \n   string \n   Gives: \n   string   Converts the first character of the string into upper case and the\nremaining characters into lower case.",
            "title": "capitalize"
        },
        {
            "location": "/api/#chars",
            "text": "Takes: \n   string \n   Gives: \n   string, array   Extracts characters from the string and returns them in an array of\nsubstrings.",
            "title": "chars"
        },
        {
            "location": "/api/#length_1",
            "text": "Takes: \n   string \n   Gives: \n   string, number   Returns the length of the string.",
            "title": "length"
        },
        {
            "location": "/api/#lines",
            "text": "Takes: \n   string \n   Gives: \n   string, array   Extracts lines from the string and returns them in an array.",
            "title": "lines"
        },
        {
            "location": "/api/#lower-case",
            "text": "Takes: \n   string \n   Gives: \n   string   Converts the string into lower case.",
            "title": "lower-case"
        },
        {
            "location": "/api/#lower-case_1",
            "text": "Takes: \n   string \n   Gives: \n   string, boolean   Tests whether the string contains only lower case characters. Empty strings\nreturn false.",
            "title": "lower-case?"
        },
        {
            "location": "/api/#reverse_1",
            "text": "Takes: \n   string \n   Gives: \n   string   Reverses the string.",
            "title": "reverse"
        },
        {
            "location": "/api/#runes",
            "text": "Takes: \n   string \n   Gives: \n   string, array   Extracts Unicode code points from the string and returns them in an array\nof numbers.",
            "title": "runes"
        },
        {
            "location": "/api/#space",
            "text": "Takes: \n   string \n   Gives: \n   string, boolean   Tests whether the string contains only whitespace characters. Empty strings\nreturn false.",
            "title": "space?"
        },
        {
            "location": "/api/#swap-case",
            "text": "Takes: \n   string \n   Gives: \n   string   Turns lower case characters in the string into upper case and vice versa.",
            "title": "swap-case"
        },
        {
            "location": "/api/#trim",
            "text": "Takes: \n   string \n   Gives: \n   string   Strips whitespace from the begining and the end of the string.",
            "title": "trim"
        },
        {
            "location": "/api/#trim-left",
            "text": "Takes: \n   string \n   Gives: \n   string   Strips whitespace from the begining of the string.",
            "title": "trim-left"
        },
        {
            "location": "/api/#trim-right",
            "text": "Takes: \n   string \n   Gives: \n   string   Strips whitespace from the end of the string.",
            "title": "trim-right"
        },
        {
            "location": "/api/#upper-case",
            "text": "Takes: \n   string \n   Gives: \n   string, boolean   Tests whether the string contains only upper case characters. Empty strings\nreturn false.",
            "title": "upper-case?"
        },
        {
            "location": "/api/#words",
            "text": "Takes: \n   string \n   Gives: \n   string, array   Extracts white space separated words from the string and returns them in\nan array.",
            "title": "words"
        },
        {
            "location": "/api/#symbol_2",
            "text": "",
            "title": "symbol"
        },
        {
            "location": "/api/#call_1",
            "text": "Takes: \n   symbol   Resolves given symbol into word or value, depending on the contents of the\ndata stack, local dictionary and global dictionary and executes it. If the\nsymbol does not resolve into any kind of word or value, number conversion\nis attempted on it. If that also fails, reference error will be thrown.",
            "title": "call"
        },
        {
            "location": "/api/#word_2",
            "text": "",
            "title": "word"
        },
        {
            "location": "/api/#call_2",
            "text": "Takes: \n   word   Executes body of the given word.",
            "title": "call"
        },
        {
            "location": "/api/#define",
            "text": "Takes: \n   word   Inserts given word into current local dictionary.",
            "title": "define"
        },
        {
            "location": "/api/#quote_2",
            "text": "Takes: \n   word \n   Gives: \n   word, quote   Extracts quote which acts as the body of the word and places it onto top\nof the stack.",
            "title": "quote"
        },
        {
            "location": "/api/#symbol_3",
            "text": "Takes: \n   word \n   Gives: \n   word, symbol   Extracts symbol from the word and places it onto top of the stack.",
            "title": "symbol"
        }
    ]
}